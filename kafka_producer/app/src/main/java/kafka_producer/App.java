/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kafka_producer;

import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.Future;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.clients.producer.RecordMetadata;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        Properties configs = new Properties();
        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092"); // kafka host 및 server 설정
        //configs.put("acks", "all");                         // 자신이 보낸 메시지에 대해 카프카로부터 확인을 기다리지 않습니다.
        //configs.put("block.on.buffer.full", "true");        // 서버로 보낼 레코드를 버퍼링 할 때 사용할 수 있는 전체 메모리의 바이트수
        configs.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);   // serialize 설정
        configs.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class); // serialize 설정

        // producer 생성
        //KafkaProducer<String, String> producer = new KafkaProducer<String, String>(configs);
        KafkaProducer producer = new KafkaProducer(configs);

        // message 전달
        for (int i = 0; i < 5; i++) {
            String v = "hello:"+i;

            try {
                Future<RecordMetadata> meta = producer.send(new ProducerRecord("joy01", v));

                System.out.println("Start: " + v);

                RecordMetadata m = meta.get();
                System.out.println("Offset: " + m.offset());

                System.out.println(v + " : " + meta.isDone());
            } catch (Exception e) {
                System.out.println("Exception: " + e);
            }
        }

        // 종료
        producer.flush();
        producer.close();

    }
}
